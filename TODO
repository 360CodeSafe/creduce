-*- mode: Text -*-

--------------------------------------------------------------------

C-Reduce TODO list:

add a "maximum win" argument for fuzzing

perf tuning of concurrency, try to automatically pick the right degree of concurrency
  n-1?

add optional pass timeout

more shortcut keys?

include Johan's patch for giving an include path to clang-delta

stop saving .orig files?

partial #define processing
  probably not too hard in clex

remove zero-length files at the end of reduction

in localize_headers, correctly deal with the case where the
  original C/C++ file is in the current dir

fix tests in the test directory

correctly preserve the set of files for reporting a multi-file bug
  easy-- just copy the working directory into the cwd

specify passes using a config file?

debug clex crashes, add crash reporting for it?

maybe implement passes to:
  ensure that identifiers first appear in sorted order
  identifiers are dense
  reduce the non-header-file part first, and use PCHs
  merge adjacent strings

maybe: fix the caching code and then benchmark on some large reductions
  measure hits by pass
  consider turning on caching only for passes that benefit

maybe add a format string reduction pass that eliminates a format
  specifier and also the corresponding argument

avoid spurious "system" calls in passes

write some documentation about creating a c-reduce pass: side effects,
directory restrictions, etc.

Konstantin suggestion:
  deal with un-preprocessed code in a smart way, for example by
  incrementally preprocessing files from inside c-reduce

implement suggestion from Joerg Sonnenberger:
  do transformations in chunks, like the line-reducer pass already does
  requires a good model of when this will be profitable

--------------------------------------------------------------------

clang_delta TODO list:

replace for-loops with expressions guessed from initializers
  guess that it executes 0 and 1 times

change operators to other operators, e.g., replace / with +

- From Konstantin Tokarev

As you may know, there is a clang-based tool "Include What You Use"
[1]. I think similar approach could be useful in C-Reduce to remove
whole header files instead of separate lines. Though I'm not sure it's
feasible without non-preprocessed source file and compilation command
line available.

I can imagine the next algorithm of reduction:

1. Reduce only the last section of translation unit corresponding to
original source file without #includes using all available passes.
2. Try to remove sections corresponding to "unused" headers
3. Move to section N-1 and proceed.

Assuming that "interesting" fragment of code is located in sections
with big numbers (source file and local headers) while first sections
contain library headers, this approach might be more efficient than
traditional line-based reduction.

[1] http://code.google.com/p/include-what-you-use

- (low priority) format string reductions:

 * remove anything that's not a %d or whatever from the format string

 * remove a %d directive and also the corresponding argument from a printf

- constant folding

- (low priority) constant-propagation

- (low priority) replace peephole passes in c_reduce

--------------------------------------------------------------------
