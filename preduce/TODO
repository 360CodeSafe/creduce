add blank deletion and # deletion back in...

super simplification: make lines blank instead of deleting them;
  now, line numbers are only invalidated at pass boundaries

may be able to delete caching logic-- or better, assert that we never
see repeats!

simplification: only process joins in FIFO order

master process tells slave to delete some lines and evaluate that version;
  returns true or false

periodically master merges successful variants (by taking union of deleted
  lines) and this becomes the new master copy

tricky to update current slave positions when master copy is changed

when merging fails, just take the smallest un-merged variant

line numbers must have a unique meaning, so...
  don't try to parallelize across calls to topformflat
  don't try to parallelize across changes of granularity
  never try to parallelize across changes to the master's current version

should slaves work on different parts of the file?
  maybe not, at first... just keep the current linear scan

merge when...
  reach end of current scan
  X successful variants have been found
  Y unsuccessful variants have been found

take advantage of a special merge case when we get one success after
lots of failures---just make that the current version without a test;
this is easiest if some already-forked work is invalidated

keep a history of line-number maps? or can this be avoided somehow?
