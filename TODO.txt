--------------------------------------------------------------------

c_reduce TODO list:

by default, exit if one of the tools we want isn't available
put regex passses in a perl module
make passes explicitly load and store the file
add sanity check for clang_delta: if it returns success, the
  file needs to have changed, and it still needs to compile
make pass 0 use a hand-tuned phase ordering, after that it doesn't matter
  use cleanup passes often
  don't call variable combiner
disable sanity check and enable quiet mode for timing runs
make this script follow the interface from the paper
  fully decouple delta_pos from file position
add a pass to turn hex constants into decimal
add an option to keep stats about fast vs. slow tests
expose quiet on command line
add an API for creating temporary files
add an option limiting the number of passes
see if it's faster to work from back to front
watch for unexpected abnormal compiler outputs
exploit early-exit from delta test to speed this up
  keep per-pass statistic on the probability of requiring the slow test
  invert this to decide how many fast tests to run in a row
  need to keep checkpoints

--------------------------------------------------------------------

clang_delta TODO list:

remove array dimension from a variable

replace for-loops with expressions guessed from initializers
  guess that it executes 0 and 1 times 

simplify if/foo statements 
from:
  if (stuff1) { stuff2 }
to
  stuff1
  stuff2 

simplify a comma expression below:
from
  x = (y, z);
to 
  y;
  x = z;

- turn a union into a struct

- (low priority) format string reductions:

 * remove anything that's not a %d or whatever from the format string

 * remove a %d directive and also the corresponding argument from a printf 

--------------------------------------------------------------------
